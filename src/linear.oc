#include "linear.h"
#include "linear.oh"
#include "check_error.h"
#include "config.h"
#include "input.oh"
#include "util.h"
#include <time.h>
#include <math.h>

int read_symmetric_linear_system_from_data_providers(linear_system_t *ls, ofixed_t *a, ofixed_t *b) {
	// This function must only be executed by the parties that run the GC protocol: CSP and Evaluator,
	// with is'd 1 and 2 and c->party = 0 and 1, respectively.
	int num_parties = ls->self->num_parties;
	printf("party %d listening for %d inputs", ocCurrentParty(), num_parties - 2);
	DualconR* conn = dcrConnect(ls->self);
	size_t d = ls->a.d[0];

	for(int ij = 0; ij < d * (d+1) / 2; ij++) {
			ofixed_import(&a[ij], 0);
	}
	for(int i = 0; i < d; i++) {
		ofixed_import(&b[i], 0);
	}
	obliv ufixed_t *share_a = malloc((d*(d + 1)/2) * sizeof(obliv ufixed_t));
	obliv ufixed_t *share_b = malloc(d * sizeof(obliv ufixed_t));

	ofixed_t obigtemp;
	ofixed_init(&obigtemp);
	struct timespec time_start, time_end;
	clock_gettime(CLOCK_MONOTONIC, &time_start);
	for(int k = 3; k <= num_parties; k++) {
		printf("%s receiving A from party %d\n", ocCurrentParty()==1?"CSP":"Evaluator",k);
		dcrRecvIntArray(conn, share_a, d*(d + 1)/2, k);
		printf("%s received A from party %d\n", ocCurrentParty()==1?"CSP":"Evaluator",k);
		for(size_t i = 0; i < d; i++) {
			for(size_t j = 0; j <= i; j++) {
				size_t ij = idx(i,j);
				ofixed_import(&obigtemp, share_a[ij]);
				ofixed_add(&a[ij], a[ij], obigtemp);
			}
		}
		printf("%s receiving b from party %d\n", ocCurrentParty()==1?"CSP":"Evaluator",k);
		dcrRecvIntArray(conn, share_b, d, k);
		printf("%s received b from party %d\n", ocCurrentParty()==1?"CSP":"Evaluator",k);
		for(size_t i = 0; i < d; i++) {
			ofixed_import(&obigtemp, share_b[i]);
			ofixed_add(&b[i], b[i], obigtemp);
		}
	}
	// normalize by dividing by d using integer division, since d is public and integral
	// regularization parameter lambda is added to the diagonal
	ofixed_import(&obigtemp, double_to_fixed(ls->lambda, ls->precision));
	for(size_t i = 0; i < d; i++) {
		for(size_t j = 0; j <= i; j++) {
			size_t ij = idx(i,j);
			if(i == j){
				ofixed_add(&a[ij], a[ij], obigtemp);
			} else {
				ofixed_import(&a[ij], ofixed_export(a[ij]) / (fixed_t) ls->normalizer);
			}
		}
	}
	for(size_t i = 0; i < d; i++) {
		ofixed_import(&b[i], ofixed_export(b[i]) / (fixed_t) ls->normalizer);
	}


	// Reveal A and b for debugging
	if(ocCurrentParty()==2) printf("A = \n");
	fixed_t out;
	for(size_t i = 0; i < d; i++) {
		for(size_t j = 0; j <= i; j++) {
			ofixed_reveal(&out, a[idx(i,j)], 2);
			if(ocCurrentParty()==2) printf("%3.8f ", fixed_to_double(out, ls->precision));
		}
		if(ocCurrentParty()==2) printf("\n");
	}

	if(ocCurrentParty()==2) printf("b = \n");
	for(size_t i = 0; i < d; i++) {
		ofixed_reveal(&out, b[i], 2);
		if(ocCurrentParty()==2) printf("%3.6f ", fixed_to_double(out, ls->precision));
	}
	if(ocCurrentParty()==2) printf("\n");


	clock_gettime(CLOCK_MONOTONIC, &time_end);
	if(ocCurrentParty() == 2) printf("Time taken for OT: %f\n", (time_end.tv_sec-time_start.tv_sec)+1e-9*(time_end.tv_nsec-time_start.tv_nsec));

	free(share_a);
	free(share_b);
	dcrClose(conn);
	return 0;
}

int read_symmetric_linear_system_from_ls(linear_system_t *ls, ofixed_t *a, ofixed_t *b) {
	// party 1 inputs matrix A and vector b, party 2 inputs the masks.
	//obliv fixed32_t *mask_a, *mask_b;
	ofixed_t mask;
	ofixed_init(&mask);

	size_t d;
	// check inputs for validity
	bool valid_self = (ls && (d = ls->a.d[0]) == ls->a.d[1] && ls->b.len == d);
	bool valid_both = ocBroadcastBool(valid_self, 1) && ocBroadcastBool(valid_self, 2);
	check(valid_self, "Party %'s inputs are invalid.", ocCurrentParty());
	check(valid_both, "Party %'s inputs are invalid.", 3 - ocCurrentParty());

	// check if inputs have equal dimensions
	bool equal;
	revealOblivBool(&equal,
		feedOblivInt(d, 1) ==
		feedOblivInt(d, 2), 0);
	check(equal, "Inputs of the two parties differ.");

	// since A is symmetric, we only need to read half the matrix!
	for(size_t i = 0; i < d; i++) {
		for(size_t j = 0; j <= i; j++) {
			ofixed_import(&mask, feedOblivLLong(ls->a.value[i*d+j], 2));
			ofixed_import(&a[idx(i, j)], feedOblivLLong(ls->a.value[i*d+j], 1));

			ofixed_add(&a[idx(i,j)], a[idx(i,j)], mask);
		}
		ofixed_import(&mask, feedOblivLLong(ls->b.value[i], 2));
		ofixed_import(&b[i], feedOblivLLong(ls->b.value[i], 1));
		ofixed_add(&b[i], b[i], mask);
	}

	ofixed_free(&mask);
	return 0;

error:
	//obig_free(&mask);
	return -1;
}

int read_symmetric_linear_system(linear_system_t *ls, ofixed_t *a, ofixed_t *b) {
	// This distinction is to maintain compatibility to our tests of phase 2 only
	if(!ls->self){
		return read_symmetric_linear_system_from_ls(ls, a, b);
	} else {
		return read_symmetric_linear_system_from_data_providers(ls, a, b);
	}
}
